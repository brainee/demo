@{
  ViewBag.Title = "Ui index";
}
<script type="text/lizard-config">
{
  url_schema: 'ui/select',
  viewName: 'ui_select',
  models: {
    apis: [],
    filter: function(datas) {
      return {

      };
    }
  },
  view:{
    viewport: Lizard.T("viewportTmpl")
  },
  controller: '/webapp/demo2.1/webresource/controllers/ui/select.js'
}
</script>

<script id="viewportTmpl" type="text/lizard-template">
 <div class="cui-citys-bd">
 </div>
<pre><code>
//select组件用于模拟传统的select组件
demo01: function () {
  var scope = this, curItem;
  var demo01Sec = scope.$('.js_sec01');
  if (!this.demo1) {
    this.demo1 = new UISelect({
      datamodel: {
        data: [
          { id: 1, name: '中国' }, { id: 2, name: '美国' }, { id: 3, name: '英国' },
          { id: 4, name: '中国1' }, { id: 5, name: '美国2' }, { id: 6, name: '英国3' }
        ]
      },
      displayNum: 5,
      changed: function (item) {
        demo01Sec.html(item.id + ': ' + item.name);
      },
      wrapper: this.$('.js_demo01')
    });
    this.demo1.show();
    curItem = this.demo1.getSelected();
    demo01Sec.html(curItem.id + ': ' + curItem.name);
  }
},
</code></pre>
  <div class="js_demo01" style=" width: 50%;  margin: 0 auto; "></div>
  <br />
  <span class="btn-secondary full-width js_sec01">.btn-secondary</span>



 <style>
   .cm-birthday {
     text-align: center;
     background: white;
   }
   .cm-birthday-col {
    background: white;
   
   } 
   
   .cm-birthday h3 {
     border-bottom: 1px solid #dbdbdb;
     line-height: 44px;
   }

     .cm-birthday .cm-birthday-col {
       float: left;
       width: 30%;
       text-align: center;
       border-right: 1px solid #dbdbdb;
       margin: 5px 0;
       position: relative;
     }

       .cm-birthday .cm-birthday-col:nth-of-type(1) {
         width: 40%;
       }

       .cm-birthday .cm-birthday-col:nth-last-of-type(1) {
         border-right: none;
       }


       .cm-birthday .cm-birthday-col li {
         line-height: 36px;
         color: #ccc;
       }

         .cm-birthday .cm-birthday-col li.active {
           color: #333;
         }
   .cm-scroll-select::before, .cm-scroll-select::after {
    left: 3px;
    right: 3px;
   }

 </style>
  <pre><code>
/*
此处根据select组件，生成生日选择组件，这个代码业务逻辑有点小复杂：
① 需要处理月份变化后日期重新加载的问题
② 并且需要处理闰年的情况
上述两种情况都是年或者月changed的时候需要触发事件，实际的业务中会涉及到三级联动，其业务更加复杂
业务复杂变相导致该组件不好用，并不是组件本身有多难
demo02: function () {
  var i, len, item;
  var scope = this, curItem;
  var _now = new Date();
  var _year = _now.getFullYear();
  var _month = _now.getMonth();
  var _day = _now.getDate();
  var yearData = [];
  var monthData = [];
  var dayData = [];
  len = _year - 1939;
  for (i = 0; i < len; i++) {
    item = {
      id: 1940 + i,
      name: (1940 + i)+'年'
    };
    yearData.push(item);
  }
  for (i = 0; i < 12; i++) {
    item = {
      id: 1 + i,
      name: ((1 + i) < 10 ? ('0' + (1+i)) : (1+i)) + '月'
    };
    monthData.push(item);
  }
  for (i = 0; i < 31; i++) {
    item = {
      id: 1 + i,
      name: ((1 + i) < 10 ? ('0' + (1 + i)) : (1 + i)) + '日'
    };
    dayData.push(item);
  }
  //由localstorage读取数据
  var birObj = birth.get();
  //当年或者月改变后，日期需要判断闰年，或者日期变化的行为
  var _yearOrMonthChanged = function (yearItem, monthItem) {
    //处理month的时候日应该有所变化
    var dayFlag = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31 };
    //闰年处理，需要先获取年份
    if (_.dateUtil.isLeapYear(yearItem.id)) {
      dayFlag[2] = 29;
    }
    var changed = false;
    //此处重置日期接口，并且需要重置“天”的dom结构
    for (var i = 0; i < 31; i++) {
      //设置该项不可选取
      dayData[i].disabled = true;
    }
    for (i = 31; i > dayFlag[monthItem.id] && i > 0; i--) {
      dayData[i - 1].disabled = false;
      changed = true;
    }
    if (changed) {
      scope.day.reload(dayData);
    }
  };
  if (!this.year) {
    this.year = new UISelect({
      datamodel: {
        data: yearData
      },
      displayNum: 5,
      changed: function (item) {
        //demo02Sec.html(item.id + ': ' + item.name);
        _yearOrMonthChanged(item, scope.month.getSelected());
        scope._setBirth();
      },
      wrapper: this.$('.js_year_wrapper')
    });
  }
  if (!this.month) {
    this.month = new UISelect({
      datamodel: {
        data: monthData
      },
      displayNum: 5,
      changed: function (item) {
        //demo02Sec.html(item.id + ': ' + item.name);
        _yearOrMonthChanged(scope.year.getSelected(), item);
        scope._setBirth();
      },
      wrapper: this.$('.js_month_wrapper')
    });
  }
  if (!this.day) {
    this.day = new UISelect({
      datamodel: {
        data: dayData
      },
      displayNum: 5,
      changed: function (item) {
        //demo02Sec.html(item.id + ': ' + item.name);
        scope._setBirth();
      },
      wrapper: this.$('.js_day_wrapper')
    });
  }
  //因为年月日有依赖关系，这里得注意
  this.year.show();
  this.month.show();
  this.day.show();
  //如果已经保存了日期对象，直接读出
  if (birObj) {
    this.year.setId(birObj.year);
    this.month.setId(birObj.month);
    this.day.setId(birObj.day);
    _yearOrMonthChanged(scope.year.getSelected(), scope.month.getSelected());
  }
  this._setBirth();
},
_setBirth: function () {
  var demo02Sec = this.$('.js_sec02');
  var yearItem, monthItem, dayItem;
  yearItem = this.year.getSelected();
  monthItem = this.month.getSelected();
  dayItem = this.day.getSelected();
  birth.set({
    year: yearItem.id,
    month: monthItem.id,
    day: dayItem.id
  });
  demo02Sec.html(yearItem.name + monthItem.name + dayItem.name);
},
*/


</code></pre>

  <div class="cm-birthday">
    <h3>请选择出生日期</h3>
    <div class="cm-birthday-col js_year_wrapper">
    
    </div>
    <div class="cm-birthday-col js_month_wrapper">
    
    </div>
    <div class="cm-birthday-col js_day_wrapper">
    
    </div>
  </div>
  <br />
  <br />
  <span class="btn-secondary full-width js_sec02" style=" margin-top: 20px; ">.btn-secondary</span>

  <br />
  <br />
  <br />

</script>